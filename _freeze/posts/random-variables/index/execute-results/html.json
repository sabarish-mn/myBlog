{
  "hash": "d8a7dfe84c828f2c3665aee67e28f411",
  "result": {
    "markdown": "---\ntitle: Random Variables\nauthor: Sabarish Muthumani Narayanasamy\ndate: '2023-11-13'\ncategories:\n  - code\n  - analysis\nimage: image.jpg\n---\n\n# Blog 3 â€“ Random Variables\n\n## Generating random variables from scratch\n\n### The code and the demo\n\n#### Uniform random generator based on \"Linear Congruential Generator\"\n\nThis is a post with executable code.\n\nWe will first import the required libraries:\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n# importing required libraries\nimport logging\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom sklearn.cluster import KMeans\nfrom collections import Counter\nimport time\n\nlogging.getLogger('sklearn').setLevel(logging.WARNING)\n```\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ndef pseudo_uniform_bad(mult=5,\n                       mod=11,\n                       seed=1,\n                       size=1):\n    \"\"\"\n    A bad pseudo random generator with small multipliers and modulus\n    \"\"\"\n    U = np.zeros(size)\n    x = (seed*mult+1)%mod\n    U[0] = x/mod\n    for i in range(1,size):\n        x = (x*mult+1)%mod\n        U[i] = x/mod\n    return U\n```\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nl=pseudo_uniform_bad(seed=3,size=1000)\nplt.hist(l,bins=20,edgecolor='k')\nplt.xticks(fontsize=15)\nplt.yticks(fontsize=15)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-4-output-1.png){width=588 height=418}\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\ndef pseudo_uniform_good(mult=16807,\n                        mod=(2**31)-1,\n                        seed=123456789,\n                        size=1):\n    \"\"\"\n    A reasoanbly good pseudo random generator\n    \"\"\"\n    U = np.zeros(size)\n    x = (seed*mult+1)%mod\n    U[0] = x/mod\n    for i in range(1,size):\n        x = (x*mult+1)%mod\n        U[i] = x/mod\n    return U\n```\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nl=pseudo_uniform_good(size=10000)\nplt.hist(l,bins=20,edgecolor='k')\nplt.xticks(fontsize=15)\nplt.yticks(fontsize=15)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-6-output-1.png){width=587 height=418}\n:::\n:::\n\n\n### Sample picker Distribution\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\ndef sample_pick(lst):\n    \"\"\"\n    Picks up a random sample from a given list\n    \"\"\"\n    # Sets seed based on the decimal portion of the current system clock\n    t = time.perf_counter()\n    seed = int(10**9*float(str(t-int(t))[0:]))\n    # Random sample as an index\n    l = len(lst)\n    s = pseudo_uniform(low=0,high=l,seed=seed,size=1)\n    idx = int(s)\n    \n    return (lst[idx])\n\ndef pseudo_uniform(low=0,\n                   high=1,\n                  seed=123456789,\n                  size=1):\n    \"\"\"\n    Generates uniformly random number between `low` and `high` limits\n    \"\"\"\n    return low+(high-low)*pseudo_uniform_good(seed=seed,size=size)\n\ndice_faces = ['one','two','three','four','five','six']\n```\n:::\n\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nfor _ in range(30):\n    print(sample_pick(dice_faces),end=', ')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nsix, three, five, six, one, one, two, three, three, four, four, five, five, six, six, one, two, two, three, three, four, four, five, five, six, one, one, two, two, three, \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\Sabarish M N\\AppData\\Local\\Temp\\ipykernel_3728\\1321908839.py:11: DeprecationWarning: Conversion of an array with ndim > 0 to a scalar is deprecated, and will error in future. Ensure you extract a single element from your array before performing this operation. (Deprecated NumPy 1.25.)\n  idx = int(s)\n```\n:::\n:::\n\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nl = []\nfor _ in range(10000):\n    t = time.perf_counter()\n    seed = int(10**9*float(str(t-int(t))[0:]))\n    l.append(float(pseudo_uniform(0,6,seed=seed,size=1)))\n    \nplt.hist(l,bins=20,edgecolor='k')\nplt.xticks(fontsize=15)\nplt.yticks(fontsize=15)\nplt.xlim(-1,7)\nplt.show()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\Sabarish M N\\AppData\\Local\\Temp\\ipykernel_3728\\3436541096.py:5: DeprecationWarning: Conversion of an array with ndim > 0 to a scalar is deprecated, and will error in future. Ensure you extract a single element from your array before performing this operation. (Deprecated NumPy 1.25.)\n  l.append(float(pseudo_uniform(0,6,seed=seed,size=1)))\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-9-output-2.png){width=594 height=418}\n:::\n:::\n\n\n### Bernoulli Distribution\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\ndef pseudo_bernoulli(p=0.5,size=1):\n    \"\"\"\n    Bernoulli generator from uniform generator\n    \"\"\"\n    # Sets seed based on the decimal portion of the current system clock\n    t = time.perf_counter()\n    seed = int(10**9*float(str(t-int(t))[0:]))\n    B = pseudo_uniform(seed=seed,size=size)\n    B = (B<=p).astype(int)\n    \n    return B\n\nl=pseudo_bernoulli(p=0.2,size=1000)\nplt.hist(l,bins=20,edgecolor='k')\nplt.xticks(fontsize=15)\nplt.yticks(fontsize=15)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-10-output-1.png){width=587 height=418}\n:::\n:::\n\n\n### Binomial Distribution\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\ndef pseudo_binomial(n=100,\n                   p=0.5,\n                   size=1):\n    \"\"\"\n    Binomial distribution from the Uniform generator\n    \"\"\"\n    binom = []\n    for _ in range(size):\n        t = time.perf_counter()\n        seed = int(10**9*float(str(t-int(t))[0:]))\n        U = pseudo_uniform(size=n,seed=seed)\n        Y = (U <= p).astype(int)\n        binom.append(np.sum(Y))\n    \n    return binom\n\n\n# 100 loaded coins, each with probability of head 0.75, are flipped \n# This trial/experiment is repeated for 15 times\n# The number of heads in each experiment are given below\npseudo_binomial(n=100,p=0.75,size=15)\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n[75, 71, 85, 70, 70, 74, 76, 77, 81, 78, 70, 77, 75, 77, 79]\n```\n:::\n:::\n\n\n### Normal Distribution\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\ndef pseudo_normal(mu=0.0,sigma=1.0,size=1):\n    \"\"\"\n    Generates Normal distribution from the Uniform distribution using Box-Muller transform\n    \"\"\"\n    # A pair of Uniform distributions\n    t = time.perf_counter()\n    seed1 = int(10**9*float(str(t-int(t))[0:]))\n    U1 = pseudo_uniform(seed=seed1,size=size)\n    t = time.perf_counter()\n    seed2 = int(10**9*float(str(t-int(t))[0:]))\n    U2 = pseudo_uniform(seed=seed2,size=size)\n    # Standard Normal pair\n    Z0 = np.sqrt(-2*np.log(U1))*np.cos(2*np.pi*U2)\n    Z1 = np.sqrt(-2*np.log(U1))*np.sin(2*np.pi*U2)\n    # Scaling\n    Z0 = Z0*sigma+mu\n    \n    return Z0\n\nl1=pseudo_normal(size=10000)\nplt.hist(l1,bins=25,edgecolor='k',alpha=0.5,color='blue')\nl2=pseudo_normal(mu=-3,sigma=2.0,size=10000)\nplt.hist(l2,bins=25,edgecolor='k',alpha=0.5,color='red')\nl3=pseudo_normal(mu=3,sigma=0.5,size=10000)\nplt.hist(l3,bins=25,edgecolor='k',alpha=0.5,color='green')\n\nplt.xticks(fontsize=15)\nplt.yticks(fontsize=15)\nplt.legend([\"$\\mu$:0, $\\sigma$:1.0\",\n           \"$\\mu$:-3, $\\sigma$:2.0\",\n           \"$\\mu$:3, $\\sigma$:0.5\"],fontsize=14)\nplt.show()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n<>:29: SyntaxWarning: invalid escape sequence '\\m'\n<>:30: SyntaxWarning: invalid escape sequence '\\m'\n<>:31: SyntaxWarning: invalid escape sequence '\\m'\n<>:29: SyntaxWarning: invalid escape sequence '\\m'\n<>:30: SyntaxWarning: invalid escape sequence '\\m'\n<>:31: SyntaxWarning: invalid escape sequence '\\m'\nC:\\Users\\Sabarish M N\\AppData\\Local\\Temp\\ipykernel_3728\\1355573055.py:29: SyntaxWarning: invalid escape sequence '\\m'\n  plt.legend([\"$\\mu$:0, $\\sigma$:1.0\",\nC:\\Users\\Sabarish M N\\AppData\\Local\\Temp\\ipykernel_3728\\1355573055.py:30: SyntaxWarning: invalid escape sequence '\\m'\n  \"$\\mu$:-3, $\\sigma$:2.0\",\nC:\\Users\\Sabarish M N\\AppData\\Local\\Temp\\ipykernel_3728\\1355573055.py:31: SyntaxWarning: invalid escape sequence '\\m'\n  \"$\\mu$:3, $\\sigma$:0.5\"],fontsize=14)\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-12-output-2.png){width=600 height=418}\n:::\n:::\n\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nl=pseudo_normal(size=10000)\nplt.hist(l,bins=25,edgecolor='k')\nplt.xticks(fontsize=15)\nplt.yticks(fontsize=15)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-13-output-1.png){width=600 height=418}\n:::\n:::\n\n\n### Exponential Distribution\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\ndef pseudo_exp(lamb,size=1):\n    \"\"\"\n    Generates exponential distribution from the Uniform distribution\n    \"\"\"\n    t = time.perf_counter()\n    seed = int(10**9*float(str(t-int(t))[0:]))\n    U = pseudo_uniform(size=size,seed=seed)\n    X = -(1/lamb)*(np.log(1-U))\n    \n    return X\n\nl=pseudo_exp(lamb=0.1,size=10000)\nplt.hist(l,bins=20,edgecolor='k')\nplt.xticks(fontsize=15)\nplt.yticks(fontsize=15)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-14-output-1.png){width=600 height=418}\n:::\n:::\n\n\n### Poisson Distribution\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\ndef pseudo_poisson(alpha,size=1):\n    \"\"\"\n    \"\"\"\n    poisson = []\n    for _ in range(size):\n        t = time.perf_counter()\n        seed = int(10**9*float(str(t-int(t))[0:]))\n        U = pseudo_uniform(seed=seed,size=5*alpha)\n        X,P,i = 0,1,0\n        while P >= np.exp(-alpha):\n            P = U[i]*P\n            X+=1\n            i+=1\n        poisson.append(X)\n    return np.array(poisson)\n\nl1=pseudo_poisson(alpha=5,size=10000)\nl2=pseudo_poisson(alpha=10,size=10000)\nl3=pseudo_poisson(alpha=20,size=10000)\n\nd1=dict(Counter(l1))\nd2=dict(Counter(l2))\nd3=dict(Counter(l3))\n\nk1 = [k for k in d1.keys()]\nv1 = [v for v in d1.values()]\nk2 = [k for k in d2.keys()]\nv2 = [v for v in d2.values()]\nk3 = [k for k in d3.keys()]\nv3 = [v for v in d3.values()]\n\n# Plotting\nplt.scatter(k1,v1,c='blue')\nplt.scatter(k2,v2,c='k')\nplt.scatter(k3,v3,c='green')\nplt.legend([\"Rate parameter \"+\"$\\lambda$: \"+str(i) for i in (5,10,20)],fontsize=15)\nplt.xticks(fontsize=15)\nplt.yticks(fontsize=15)\nplt.show()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n<>:36: SyntaxWarning: invalid escape sequence '\\l'\n<>:36: SyntaxWarning: invalid escape sequence '\\l'\nC:\\Users\\Sabarish M N\\AppData\\Local\\Temp\\ipykernel_3728\\2970150594.py:36: SyntaxWarning: invalid escape sequence '\\l'\n  plt.legend([\"Rate parameter \"+\"$\\lambda$: \"+str(i) for i in (5,10,20)],fontsize=15)\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-15-output-2.png){width=600 height=418}\n:::\n:::\n\n\n",
    "supporting": [
      "index_files\\figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}